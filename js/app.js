// Generated by CoffeeScript 1.6.3
(function() {
  'StopWatch\nContains all the typical methods and behaviours of a stopwatch';
  var App, StopWatch;

  StopWatch = (function() {
    function StopWatch() {
      this.startTime = 0;
      this.running = false;
      this.elapsed = 0;
      this.firstRun = true;
    }

    StopWatch.prototype.start = function() {
      console.log('StopWatch started');
      if (this.firstRun) {
        this.elapsed = this.startTime = new Date().getTime();
        this.firstRun = false;
      } else {
        this.startTime = new Date().getTime() - this.elapsed;
      }
      return this.running = true;
    };

    StopWatch.prototype.stop = function() {
      console.log('StopWatch stopped');
      this.elapsed = new Date().getTime() - this.startTime;
      return this.running = false;
    };

    StopWatch.prototype.getElapsedTime = function() {
      this.elapsed = new Date().getTime() - this.startTime;
      return this.formatTime(this.elapsed);
    };

    StopWatch.prototype.isRunning = function() {
      return this.running;
    };

    StopWatch.prototype.reset = function() {
      console.log('StopWatch reset');
      this.elapsedTime = 0;
      return this.firstRun = true;
    };

    StopWatch.prototype.pad = function(num, size) {
      var s;
      s = "0000" + num;
      return s.substr(s.length - size);
    };

    StopWatch.prototype.formatTime = function() {
      var h, m, newTime, s, time;
      h = Math.floor(this.elapsed / (60 * 60 * 1000));
      time = this.elapsed % (60 * 60 * 1000);
      m = Math.floor(time / (60 * 1000));
      time = this.elapsed % (60 * 1000);
      s = Math.floor(time / 1000);
      if (s > 60) {
        newTime = this.pad(h, 2) + ':' + this.pad(m, 2) + ':' + this.pad(s, 2);
      } else {
        newTime = this.pad(h, 2) + ':' + this.pad(m, 2) + ':' + this.pad(s, 2);
      }
      return newTime;
    };

    return StopWatch;

  })();

  'App\nThe MainEntry point of the application initializes the stopWatch and handles \nall the button events adn rendering and updating';

  App = (function() {
    function App() {
      /*@canvas = $('canvas')
      @ctx = @canvas[0].getContext '2d'
      @height = @canvas.height()
      @canvas[0].height = @height
      $(window).resize @resize
      @calculateWidth()
      */

      var _this = this;
      this.timeText = $('#timer');
      this.timeText.html('00:00:00');
      this.stopWatch = new StopWatch;
      this.startButton = $('#startButton');
      this.startButton.on('click', function(event) {
        if (_this.stopWatch.isRunning()) {
          _this.stopWatch.stop();
          return _this.startButton.html('Start');
        } else {
          _this.stopWatch.start();
          return _this.startButton.html('Stop');
        }
      });
      this.resetButton = $('#resetButton');
      this.resetButton.on('click', function(event) {
        _this.stopWatch.reset();
        return _this.timeText.html('00:00:00');
      });
    }

    App.prototype.update = function() {
      if (this.stopWatch.isRunning()) {
        return this.timeText.html(this.stopWatch.getElapsedTime());
      }
    };

    App.prototype.animate = function() {
      this.ctx.fillStyle = 'black';
      this.ctx.fillRect(0, 0, this.width, this.height);
      this.ctx.font = '60px digital';
      this.ctx.fillStyle = 'green';
      this.ctx.fillText("00:00:00", this.width / 2 - 105, this.height / 2 + 20);
      return requestAnimationFrame(this.animate);
    };

    App.prototype.resize = function() {
      return this.calculateWidth();
    };

    App.prototype.calculateWidth = function() {
      this.width = this.canvas.width() - 1;
      return this.canvas[0].width = this.width;
    };

    return App;

  })();

  $(function() {
    var clocktimer;
    console.log("App Started");
    window.app = new App;
    return clocktimer = setInterval("window.app.update()", 1);
  });

}).call(this);
